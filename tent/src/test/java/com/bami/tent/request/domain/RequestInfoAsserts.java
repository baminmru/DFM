package com.bami.tent.request.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInfoAllPropertiesEquals(RequestInfo expected, RequestInfo actual) {
        assertRequestInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertRequestInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInfoAllUpdatablePropertiesEquals(RequestInfo expected, RequestInfo actual) {
        assertRequestInfoUpdatableFieldsEquals(expected, actual);
        assertRequestInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInfoAutoGeneratedPropertiesEquals(RequestInfo expected, RequestInfo actual) {
        assertThat(expected)
            .as("Verify RequestInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInfoUpdatableFieldsEquals(RequestInfo expected, RequestInfo actual) {
        assertThat(expected)
            .as("Verify RequestInfo relevant properties")
            .satisfies(e -> assertThat(e.getContract()).as("check contract").isEqualTo(actual.getContract()))
            .satisfies(e -> assertThat(e.getRequestDate()).as("check requestDate").isEqualTo(actual.getRequestDate()))
            .satisfies(e -> assertThat(e.getCodeAtSource()).as("check codeAtSource").isEqualTo(actual.getCodeAtSource()))
            .satisfies(e -> assertThat(e.getEffectiveDateStart()).as("check effectiveDateStart").isEqualTo(actual.getEffectiveDateStart()))
            .satisfies(e -> assertThat(e.getEffectiveDateEnd()).as("check effectiveDateEnd").isEqualTo(actual.getEffectiveDateEnd()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestInfoUpdatableRelationshipsEquals(RequestInfo expected, RequestInfo actual) {
        assertThat(expected)
            .as("Verify RequestInfo relationships")
            .satisfies(e -> assertThat(e.getRequestType()).as("check requestType").isEqualTo(actual.getRequestType()))
            .satisfies(e -> assertThat(e.getRequestSource()).as("check requestSource").isEqualTo(actual.getRequestSource()));
    }
}
