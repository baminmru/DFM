package com.bami.tent.request.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestContentConfigAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestContentConfigAllPropertiesEquals(RequestContentConfig expected, RequestContentConfig actual) {
        assertRequestContentConfigAutoGeneratedPropertiesEquals(expected, actual);
        assertRequestContentConfigAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestContentConfigAllUpdatablePropertiesEquals(RequestContentConfig expected, RequestContentConfig actual) {
        assertRequestContentConfigUpdatableFieldsEquals(expected, actual);
        assertRequestContentConfigUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestContentConfigAutoGeneratedPropertiesEquals(RequestContentConfig expected, RequestContentConfig actual) {
        assertThat(expected)
            .as("Verify RequestContentConfig auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestContentConfigUpdatableFieldsEquals(RequestContentConfig expected, RequestContentConfig actual) {
        assertThat(expected)
            .as("Verify RequestContentConfig relevant properties")
            .satisfies(e -> assertThat(e.getIsMandatory()).as("check isMandatory").isEqualTo(actual.getIsMandatory()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedBy()).as("check updatedBy").isEqualTo(actual.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestContentConfigUpdatableRelationshipsEquals(RequestContentConfig expected, RequestContentConfig actual) {
        assertThat(expected)
            .as("Verify RequestContentConfig relationships")
            .satisfies(e -> assertThat(e.getRequestConfigId()).as("check requestConfigId").isEqualTo(actual.getRequestConfigId()))
            .satisfies(e -> assertThat(e.getParameter()).as("check parameter").isEqualTo(actual.getParameter()));
    }
}
